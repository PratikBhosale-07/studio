/**
 * @file Firebase Security Rules for TalentFlow AI.
 *
 * @description This ruleset enforces a role-based access control model for the TalentFlow AI system,
 * with distinct collections for Employees, Managers, and Admins. Individual Development Plans (IDPs)
 * are associated with Employees. Access control is based on user roles and document ownership.
 *
 * @dataStructure
 * - /employees/{employeeId}: Employee profiles, accessible only to the employee and admins.
 * - /managers/{managerId}: Manager profiles, accessible only to the manager and admins.
 * - /admins/{adminId}: Admin profiles, accessible only to the admin.
 * - /individual_development_plans/{idpId}: Individual Development Plans, accessible to the associated employee and admins.
 *
 * @keySecurityDecisions
 * - Listing of users (employees, managers, admins) is prohibited for non-admins.
 * - Data consistency is enforced between document IDs and user IDs in user-specific collections.
 * - IDP access is granted to the associated employee.
 *
 * @denormalizationForAuthorization
 * - The `employeeId` field is present on the `/individual_development_plans/{idpId}` document to simplify authorization checks.
 *
 * @structuralSegregation
 * - User profiles (employees, managers, admins) are stored in separate collections to simplify role-based access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines a global function to check if a user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines a helper function to check if the request is made by the owner of the document.
     * @param {string} userId - The user ID to check against.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Defines a helper function to check if the request is made by the existing owner of the document.
     * @param {string} userId - The user ID to check against.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource.data != null;
    }

    /**
     * @description Checks if the user's ID is present in the admins collection.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Rules for the /employees/{employeeId} collection.
     * @path /employees/{employeeId}
     * @allow (get, create, update, delete) - An employee can read, create, update, or delete their own profile (employeeId matches auth.uid).
     * @allow (get) - An admin can read any employee profile.
     * @deny (list) - Employees cannot list other employee profiles.
     * @deny (create, update, delete) - Non-employees cannot create, update or delete employee profiles.
     * @deny (create, update, delete) - Employees cannot create, update or delete another employee's profile.
     * @principle Enforces document ownership and admin overrides for employee profiles.
     */
    match /employees/{employeeId} {
      allow get: if isOwner(employeeId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(employeeId);
      allow update: if isOwner(employeeId);
      allow delete: if isOwner(employeeId);
    }

    /**
     * @description Rules for the /managers/{managerId} collection.
     * @path /managers/{managerId}
     * @allow (get, create, update, delete) - A manager can read, create, update, or delete their own profile (managerId matches auth.uid).
     * @allow (get) - An admin can read any manager profile.
     * @deny (list) - Managers cannot list other manager profiles.
     * @deny (create, update, delete) - Non-managers cannot create, update or delete manager profiles.
     * @deny (create, update, delete) - Managers cannot create, update or delete another manager's profile.
     * @principle Enforces document ownership and admin overrides for manager profiles.
     */
    match /managers/{managerId} {
      allow get: if isOwner(managerId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(managerId);
      allow update: if isOwner(managerId);
      allow delete: if isOwner(managerId);
    }

    /**
     * @description Rules for the /admins/{adminId} collection.
     * @path /admins/{adminId}
     * @allow (get, create, update, delete) - An admin can read, create, update, or delete their own profile (adminId matches auth.uid).
     * @deny (list) - Admins cannot list other admin profiles.
     * @deny (create, update, delete) - Non-admins cannot create, update or delete admin profiles.
     * @deny (create, update, delete) - Admins cannot create, update or delete another admin's profile.
     * @principle Enforces document ownership for admin profiles.
     */
    match /admins/{adminId} {
      allow get: if isOwner(adminId);
      allow list: if false;
      allow create: if isOwner(adminId);
      allow update: if isOwner(adminId);
      allow delete: if isOwner(adminId);
    }

    /**
     * @description Rules for the /individual_development_plans/{idpId} collection.
     * @path /individual_development_plans/{idpId}
     * @allow (get, create, update, delete) - An employee can read, create, update, or delete their own IDP (employeeId in document matches auth.uid).
     * @allow (get) - An admin can read any IDP.
     * @deny (list) - Employees cannot list other IDPs.
     * @deny (create, update, delete) - Non-employees cannot create, update or delete IDPs.
     * @deny (create, update, delete) - Employees cannot create, update or delete another employee's IDP.
     * @principle Enforces document ownership and admin overrides for IDPs.
     */
    match /individual_development_plans/{idpId} {
      allow get: if resource.data.employeeId == request.auth.uid || isAdmin();
      allow list: if false;
      allow create: if request.resource.data.employeeId == request.auth.uid;
      allow update: if getAfter().data.employeeId == request.auth.uid || isAdmin();
      allow delete: if resource.data.employeeId == request.auth.uid || isAdmin();
    }
  }
}