/**
 * @fileOverview Firestore Security Rules for TalentFlow AI.
 *
 * Core Philosophy:
 * This ruleset enforces role-based access control, granting employees access to their own individual development plans (IDPs),
 * and allowing listing of all IDPs. The system leverages structural segregation, storing user profiles (employees, managers, admins)
 * in separate top-level collections.
 *
 * Data Structure:
 * - /employees/{employeeId}: Employee profiles.
 * - /managers/{managerId}: Manager profiles.
 * - /admins/{adminId}: Admin profiles.
 * - /individual_development_plans/{idpId}: Individual development plans (IDPs).
 *
 * Key Security Decisions:
 * - Employees can only read/write their own IDPs.
 * - Listing of all IDPs is allowed.
 * - Only authenticated users can access any data. Anonymous access is not permitted.
 * - Data validation is limited to authorization-critical fields to allow rapid prototyping.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /employees collection.
     * @path /employees/{employeeId}
     * @allow (create) User with UID 'employee123' can create a new employee document with employeeId = 'employee123'.
     * @deny (create) User with UID 'anotherUser' cannot create an employee document with employeeId = 'employee123'.
     * @principle Enforces document ownership for writes.
     */
    match /employees/{employeeId} {
      allow get: if isOwner(employeeId);
      allow list: if false;
      allow create: if isOwner(employeeId) && request.resource.data.id == employeeId;
      allow update: if isExistingOwner(employeeId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(employeeId);
    }

    /**
     * @description Rules for the /managers collection.
     * @path /managers/{managerId}
     * @allow (create) User with UID 'manager456' can create a new manager document with managerId = 'manager456'.
     * @deny (create) User with UID 'anotherUser' cannot create a manager document with managerId = 'manager456'.
     * @principle Enforces document ownership for writes.
     */
    match /managers/{managerId} {
      allow get: if isOwner(managerId);
      allow list: if false;
      allow create: if isOwner(managerId) && request.resource.data.id == managerId;
      allow update: if isExistingOwner(managerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(managerId);
    }

    /**
     * @description Rules for the /admins collection.
     * @path /admins/{adminId}
     * @allow (create) User with UID 'admin789' can create a new admin document with adminId = 'admin789'.
     * @deny (create) User with UID 'anotherUser' cannot create an admin document with adminId = 'admin789'.
     * @principle Enforces document ownership for writes.
     */
    match /admins/{adminId} {
      allow get: if isOwner(adminId);
      allow list: if false;
      allow create: if isOwner(adminId) && request.resource.data.id == adminId;
      allow update: if isExistingOwner(adminId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(adminId);
    }

    /**
     * @description Rules for the /individual_development_plans collection.
     * @path /individual_development_plans/{idpId}
     * @allow (get) Any signed-in user can read an individual development plan.
     * @allow (list) Any signed-in user can list all individual development plans.
     * @allow (create) User with UID 'user123' can create a new IDP document.
     * @deny (update) User with UID 'anotherUser' cannot update an IDP document owned by 'user123'.
     * @deny (delete) User with UID 'anotherUser' cannot delete an IDP document owned by 'user123'.
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /individual_development_plans/{idpId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.employeeId == request.auth.uid;
        allow update: if isSignedIn() && resource.data.employeeId == request.auth.uid;
        allow delete: if isSignedIn() && resource.data.employeeId == request.auth.uid && resource != null;
    }
  }
}