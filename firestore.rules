/**
 * @fileoverview Firestore Security Rules for TalentFlow AI.
 *
 * Core Philosophy: This ruleset enforces a strict owner-only access model for employees, managers, admins and their individual development plans.
 * Data Structure:
 * - /employees/{employeeId}: Stores employee profiles.
 * - /managers/{managerId}: Stores manager profiles.
 * - /admins/{adminId}: Stores admin profiles.
 * - /individual_development_plans/{idpId}: Stores individual development plans.
 *
 * Key Security Decisions:
 * - Users can only read and write their own employee, manager, and admin profiles.
 * - Users can only read and write their own individual development plans.
 * - Listing of users (employees, managers, admins) is not allowed.
 * - No public read access is granted. All data requires authentication.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for employee profiles.
     * @path /employees/{employeeId}
     * @allow (create) User with UID 'employeeId' can create their own profile.
     * @allow (get) User with UID 'employeeId' can get their own profile.
     * @allow (update) User with UID 'employeeId' can update their own profile.
     * @allow (delete) User with UID 'employeeId' can delete their own profile.
     * @deny (create) User with UID 'otherUserId' cannot create a profile with employeeId 'employeeId'.
     * @deny (get) User with UID 'otherUserId' cannot get the profile of employeeId 'employeeId'.
     * @principle Enforces document ownership for all operations.
     */
    match /employees/{employeeId} {
      function isOwner(employeeId) {
        return request.auth.uid == employeeId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      function isExistingOwner(employeeId) {
        return isOwner(employeeId) && resource != null;
      }

      allow get: if isOwner(employeeId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(employeeId);
      allow update: if isSignedIn() && isOwner(employeeId);
      allow delete: if isSignedIn() && isExistingOwner(employeeId);
    }

    /**
     * @description Enforces access control for manager profiles.
     * @path /managers/{managerId}
     * @allow (create) User with UID 'managerId' can create their own profile.
     * @allow (get) User with UID 'managerId' can get their own profile.
     * @allow (update) User with UID 'managerId' can update their own profile.
     * @allow (delete) User with UID 'managerId' can delete their own profile.
     * @deny (create) User with UID 'otherUserId' cannot create a profile with managerId 'managerId'.
     * @deny (get) User with UID 'otherUserId' cannot get the profile of managerId 'managerId'.
     * @principle Enforces document ownership for all operations.
     */
    match /managers/{managerId} {
      function isOwner(managerId) {
        return request.auth.uid == managerId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
       function isExistingOwner(managerId) {
        return isOwner(managerId) && resource != null;
      }

      allow get: if isOwner(managerId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(managerId);
      allow update: if isSignedIn() && isOwner(managerId);
      allow delete: if isSignedIn() && isExistingOwner(managerId);
    }

    /**
     * @description Enforces access control for admin profiles.
     * @path /admins/{adminId}
     * @allow (create) User with UID 'adminId' can create their own profile.
     * @allow (get) User with UID 'adminId' can get their own profile.
     * @allow (update) User with UID 'adminId' can update their own profile.
     * @allow (delete) User with UID 'adminId' can delete their own profile.
     * @deny (create) User with UID 'otherUserId' cannot create a profile with adminId 'adminId'.
     * @deny (get) User with UID 'otherUserId' cannot get the profile of adminId 'adminId'.
     * @principle Enforces document ownership for all operations.
     */
    match /admins/{adminId} {
      function isOwner(adminId) {
        return request.auth.uid == adminId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
       function isExistingOwner(adminId) {
        return isOwner(adminId) && resource != null;
      }

      allow get: if isOwner(adminId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(adminId);
      allow update: if isSignedIn() && isOwner(adminId);
      allow delete: if isSignedIn() && isExistingOwner(adminId);
    }

    /**
     * @description Enforces access control for individual development plans.
     * @path /individual_development_plans/{idpId}
     * @allow (create) User with UID 'employeeId' can create their own IDP if employeeId matches auth.uid.
     * @allow (get) User with UID 'employeeId' can get their own IDP if employeeId matches auth.uid.
     * @allow (update) User with UID 'employeeId' can update their own IDP if employeeId matches auth.uid.
     * @allow (delete) User with UID 'employeeId' can delete their own IDP if employeeId matches auth.uid.
     * @deny (create) User with UID 'otherUserId' cannot create an IDP with idpId 'idpId'.
     * @deny (get) User with UID 'otherUserId' cannot get the IDP of idpId 'idpId'.
     * @principle Enforces document ownership for all operations.
     */
    match /individual_development_plans/{idpId} {
        function isOwner(idpId) {
          return request.auth.uid == idpId;
        }
        function isSignedIn() {
          return request.auth != null;
        }
         function isExistingOwner(idpId) {
          return isOwner(idpId) && resource != null;
        }

        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn() && isExistingOwner(idpId);
    }
  }
}